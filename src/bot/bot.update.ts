import { Update, Command, Ctx, Action } from 'nestjs-telegraf';
import { Markup } from 'telegraf';
import { ACTIONS, COMMANDS, SCENES, TContext } from './bot.types';
import { ResourceService } from 'src/resource/resource.service';
import { BotHelpers } from './bot.helpers';
import { Resource } from 'src/resource/resource.entity';

@Update()
export class BotUpdate {
  constructor(
    private readonly resourceService: ResourceService,
    private readonly botHelpers: BotHelpers,
    ) {}

  @Command(COMMANDS.START)
  async onStart(@Ctx() ctx: TContext) {
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç üëãüèø! –ù–∞–ø–∏—à–∏ /list, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å—Ä–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤ üìã.');
  }

  @Command(COMMANDS.HELP)
  async onHelp(@Ctx() ctx: TContext) {
    await ctx.reply('—Ç–µ–∫—Å—Ç –ø–æ–º–æ—â–∏');
  }

  @Command(COMMANDS.LIST)
  async onList(@Ctx() ctx: TContext) {
    if (!(await this.botHelpers.assertUserExists(ctx))) return;

    const resourceList = await this.resourceService.getResourceList();

    const prepareServerItem = (serverItem: Resource): Parameters<typeof Markup.button.callback> => {
      if (!serverItem.isFree) {
        return [`üõë ${serverItem.url} (${serverItem.tgUser?.name})`, `disabled_${serverItem.id}`]
      }
  
      return [`‚úÖ ${serverItem.url}`, `take_${serverItem.id}`]
    }

    const buttons = resourceList.map((serverItem) => [Markup.button.callback(...prepareServerItem(serverItem))])

    ctx.reply('–°–ø–∏—Å–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤:\nüõë- –∑–∞–Ω—è—Ç\n‚úÖ - —Å–≤–æ–±–æ–¥–µ–Ω', Markup.inlineKeyboard(buttons))
  }

  @Command(COMMANDS.CHECK_ID)
  async onCheckId(@Ctx() ctx: TContext) {
    ctx.reply(`ID: ${ctx.from?.id}\nUser name: ${ctx.from?.username}\n–ü–µ—Ä–µ–¥–∞–π —ç—Ç—É –∏–Ω—Ñ—É @olegthegoodboy, –æ–Ω —Ç–µ–±—è –∑–∞—Ä–µ–≥–∞–µ—Ç`)
  }

  @Command(COMMANDS.BUSY_LIST)
  async onBusyList(@Ctx() ctx: TContext) {
    if (!(await this.botHelpers.assertUserExists(ctx))) return;

    const resourceList = await this.resourceService.getUserTakenResourceList(ctx.from?.id);

    const prepareServerItem = (serverItem: Resource): Parameters<typeof Markup.button.callback> => {
      return [`üõë ${serverItem.url} (${serverItem.tgUser?.name})`, `free_${serverItem.id}`]
    }
    const buttons = resourceList.map((serverItem) => [Markup.button.callback(...prepareServerItem(serverItem))])

    if (buttons.length) {
      ctx.reply('üòé –°–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç—ã—Ö —Ç–æ–±–æ–π —Ä–µ—Å—É—Ä—Å–æ–≤:', Markup.inlineKeyboard(buttons))
    } else {
      ctx.reply('üòé –£ —Ç–µ–±—è –Ω–µ—Ç—É –∑–∞–Ω—è—Ç—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤')
    }
  }

  @Action(ACTIONS.TAKE)
  async onTakeServerClick (@Ctx() ctx: TContext) {
    if (!(await this.botHelpers.assertUserExists(ctx))) return;
    
    const resourceId = this.botHelpers.getResourceId(ctx)

    ctx.scene.enter(SCENES.TAKE_RESOURCE, { resourceId, userTgId: ctx.from?.id })
  }

  @Action(ACTIONS.FREE)
  async onFreeServerClick (@Ctx() ctx: TContext) {
    if (!(await this.botHelpers.assertUserExists(ctx))) return;
  
    const resourceId = this.botHelpers.getResourceId(ctx)
    ctx.scene.enter(SCENES.FREE_RESOURCE, { resourceId, userTgId: ctx.from?.id })
  }

  @Action(ACTIONS.DISABLED)
  async onDisabledServerClick (@Ctx() ctx: TContext) {
    if (!(await this.botHelpers.assertUserExists(ctx))) return;
    const resourceId = this.botHelpers.getResourceId(ctx)

    if (!resourceId) {
      return ctx.reply('ü§î –ù–µ –Ω–∞–π–¥–µ–Ω —Ä–µ—Å—É—Ä—Å')
    }

    const resource = await this.resourceService.getResource(resourceId);
    const TOMSK_UTC_OFFSET = 7
    resource?.updatedAt.setHours(resource?.updatedAt.getHours() + TOMSK_UTC_OFFSET)
    ctx.reply(`url: ${resource?.url}\n–ó–∞–Ω—è—Ç: @${resource?.tgUser?.name}\n–î–∞—Ç–∞: ${resource?.updatedAt}`)
  }
}