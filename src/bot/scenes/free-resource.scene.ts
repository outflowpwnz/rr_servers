import { Scene, SceneEnter, SceneLeave, Command, Action } from 'nestjs-telegraf';
import { ACTIONS, COMMANDS, SCENES, TContext, TFreeResourceState } from '../bot.types';
import { ResourceService } from 'src/resource/resource.service';
import { Markup } from 'telegraf';


@Scene(SCENES.FREE_RESOURCE)
export class FreeResource {
  constructor(private readonly resourceService: ResourceService) {}

  @SceneEnter()
  async onSceneEnter(ctx: TContext) {
    try {
      const { resourceId, userTgId } = ctx.scene.state as TFreeResourceState
      const resource = await this.resourceService.getResource(resourceId)

      if (!resource) {
        await ctx.reply('–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω ü§î');
        await ctx.scene.leave();
        return
      }

      const isResourceBusyByMe = resource.tgUser?.tgId === userTgId && !resource.isFree

      if (!isResourceBusyByMe) {
        throw new Error('–†–µ—Å—É—Ä—Å —É–∂–µ —Å–≤–æ–±–æ–¥–µ–Ω –∏–ª–∏ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º üò¨')
      }

      let text = `–¢—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å ${resource.url}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${resource.description}\n–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ${resource.endMessage?.text}`

      const buttons = [
        Markup.button.callback('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', ACTIONS.FREE_ONE),
        Markup.button.callback('–û—Ç–º–µ–Ω–∞', ACTIONS.LEAVE),
      ]
      await ctx.reply(text, Markup.inlineKeyboard(buttons))
    } catch (e) {
      await ctx.reply(`–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üò¨ ${e.message}`);
      await ctx.scene.leave();
    }
  }

  @Action(ACTIONS.FREE_ONE)
  async onFreeCommand(ctx: TContext) {
    try {
      const { resourceId, userTgId } = ctx.scene.state as TFreeResourceState
      await this.resourceService.freeResource(resourceId, userTgId)
      const resource = await this.resourceService.getResource(resourceId)
      if (resource?.isFree) {
        await ctx.reply(`–†–µ—Å—É—Ä—Å ${resource.url} –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω üßë‚Äçüíª`);
      }
      await ctx.scene.leave();
    } catch (e) {
      await ctx.reply(`–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üò¨ ${e.message}`);
      await ctx.scene.leave();
    }
  }

  @Action(ACTIONS.LEAVE)
  async onLeaveCommand(ctx: TContext): Promise<void> {
    await ctx.reply('–ü–æ–∫–∞ üññ');
    await ctx.scene.leave();
  }
}